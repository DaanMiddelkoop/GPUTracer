#version 430 core

struct box {
  vec3 min;
  vec3 max;
};

struct triangle {
  vec3 a;
  vec3 b;
  vec3 c;
  int index;
  int mat;
};

struct treenode {
  box bounding;
  int node1_i;
  int node2_i;
  int triangle1_i;
  int triangle2_i;
};

struct light {
  vec3 position;
  float intensity;
};

layout(binding = 0, rgba32f) uniform image2D framebuffer;

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;

uniform int max_depth;

layout (std430, binding = 1) buffer tree_b
{
  treenode tree[];
};

layout (std430, binding = 2) buffer triangles_b
{
  triangle triangles[];
};

#define MAX_LIGHTS 1

const light lights[MAX_LIGHTS] = {
  {vec3(0.0, -600.0, 0.0), 10000.0}
};


struct hitinfo {
  vec3 position;
  vec3 normal;
  float distance;
};

struct trace_info {
  vec4 color;
  vec3 position;
  vec3 normal;
  float distance;
};

vec4 intersectTriangle(vec3 origin, vec3 dir, const triangle tr, out vec3 normal)
{
  dir = normalize(dir);
  float epsilon = 0.0000001;
  vec3 edge1 = tr.b - tr.a;
  vec3 edge2 = tr.c - tr.a;

  vec3 h = cross(dir, edge2);
  float a = dot(edge1, h);

  if (a > -epsilon && a < epsilon) {
    return vec4(0.0, 0.0, 0.0, -1);
  }

  float f = 1 / a;
  vec3 s = origin - tr.a;
  float u = f * (dot(s, h));
  if (u < 0.0 || u > 1.0) {
    return vec4(0.0, 0.0, 0.0, -1);
  }

  vec3 q = cross(s, edge1);
  float v = f * dot(dir, q);
  if (v < 0.0 || u + v > 1.0) {
    return vec4(0.0, 0.0, 0.0, -1);
  }

  float t = f * dot(edge2, q);
  normal = cross(edge1, edge2);
  return vec4(origin + (t * dir), t) ;
}

vec2 intersectBox(vec3 origin, vec3 dir, box b) {
  vec3 tMin = (b.min - origin) / dir;
  vec3 tMax = (b.max - origin) / dir;
  vec3 t1 = min(tMin, tMax);
  vec3 t2 = max(tMin, tMax);
  float tNear = max(max(t1.x, t1.y), t1.z);
  float tFar = min(min(t2.x, t2.y), t2.z);
  return vec2(tNear, tFar);
}

#define interesting_node_size 20

bool trace_tree(vec3 origin, vec3 dir, float max_dist, out trace_info info) {

  info.color = vec4(0.0, 0.0, 0.0, 1.0);
  int node_index = 0;
  int interesting_nodes[interesting_node_size];

  int interesting_node_index = 0;
  int interesting_node_new_index = 0;
  int triangle_node_index = 0;

  bool hit = false;

  for (int i = 0; i < interesting_node_size; i++) {
    interesting_nodes[i] = -1;
    //final_triangles[i] = 3;
  }
  float min_triangle_distance = -1;

  vec2 result = intersectBox(origin, dir, (tree[0]).bounding);
  if ((result.x > 0.0 || result.y > 0.0) && result.x <= result.y && result.x < max_dist && (min_triangle_distance < 0 || result.x < min_triangle_distance)) {
    interesting_nodes[int(mod(interesting_node_new_index, interesting_node_size))] = 0;
    interesting_node_new_index += 1;
    interesting_nodes[int(mod(interesting_node_new_index, interesting_node_size))] = -1;

  }

  while (interesting_nodes[int(mod(interesting_node_index, interesting_node_size))] != -1) {

    treenode tree_node = tree[(interesting_nodes[int(mod(interesting_node_index, interesting_node_size))])];
    int node_i = tree[interesting_nodes[int(mod(interesting_node_index, interesting_node_size))]].node1_i;

    if (node_i != -1) {
      result = intersectBox(origin, dir, tree[node_i].bounding);
      if ((result.x > 0.0 || result.y > 0.0) && result.x <= result.y && result.x < max_dist  && (min_triangle_distance < 0 || result.x < min_triangle_distance)) {
          // hitted inner bounding box 1. adding to interesting list.
          interesting_nodes[int(mod(interesting_node_new_index, interesting_node_size))] = node_i;
          interesting_node_new_index += 1;
          interesting_nodes[int(mod(interesting_node_new_index, interesting_node_size))] = -1;
      }
    }

    node_i = tree_node.node2_i;
    if (node_i != 1) {

      vec2 res = intersectBox(origin, dir, tree[node_i].bounding);
      if ((res.x > 0.0 || res.y > 0.0) && res.x <= res.y  && res.x < max_dist  && (min_triangle_distance < 0 || result.x < min_triangle_distance)) {
          // hitted inner bounding box 1. adding to interesting list.
          interesting_nodes[int(mod(interesting_node_new_index, interesting_node_size))] = node_i;
          interesting_node_new_index += 1;
          interesting_nodes[int(mod(interesting_node_new_index, interesting_node_size))] = -1;
      }
    }

    int triangle_i = tree_node.triangle1_i;
    if (triangle_i != -1) {
      vec3 normal;
      vec4 intersect_result = intersectTriangle(origin, dir, triangles[triangle_i], normal);
      if (intersect_result[3] > 0.0 && (intersect_result[3] < min_triangle_distance || min_triangle_distance < 0)) {
        // Hit this triangle.
        min_triangle_distance = intersect_result[3];
        info.distance = min_triangle_distance;
        info.color = vec4(0.0, 0.0, 0.0, 1.0);
        info.position = intersect_result.xyz;
        info.normal = normal;
        hit = true;
      }


      //final_triangles[triangle_node_index] = triangle_i;
      //triangle_node_index += 1;

    }

    triangle_i = tree_node.triangle2_i;
    if (triangle_i != -1) {
      vec3 normal;
      vec4 intersect_result = intersectTriangle(origin, dir, triangles[triangle_i], normal);

      if (intersect_result[3] > 0.0 && (intersect_result[3] < min_triangle_distance || min_triangle_distance < 0)) {
        // Hit this triangle.
        min_triangle_distance = intersect_result[3];
        info.distance = min_triangle_distance;
        info.color = vec4(0.0, 0.0, 0.0, 1.0);
        info.position = intersect_result.xyz;
        info.normal = normal;
        hit = true;
      }

      //final_triangles[triangle_node_index] = triangle_i;
      //triangle_node_index += 1;
    }
    interesting_node_index += 1;
  }

  //info.color.g = interesting_node_new_index / 30;

  return hit;
}

vec4 trace(vec3 origin, vec3 dir) {
  dir = normalize(dir);
  trace_info trace_info_triangle;;

  if (trace_tree(origin, dir, (999999999), trace_info_triangle)) {
    for (int k = 0; k < MAX_LIGHTS; k++) {

      vec3 new_position = trace_info_triangle.position - (dir * 0.001);
      vec3 new_direction = lights[k].position - new_position;

      trace_info trace_info_light;
      float max_dist = length(new_direction);
      new_direction = normalize(new_direction);
      if (trace_tree(new_position, new_direction, max_dist, trace_info_light)) {
        if (trace_info_light.distance < max_dist) {
          return (vec4(0.0, 0.0, 0.0, 1.0)) / 2;
        }
      }
      float angle = abs(dot(new_direction, trace_info_triangle.normal) / (length(new_direction) * (length(trace_info_triangle.normal))));




      float intensity = (lights[k].intensity / ((length(lights[k].position - trace_info_triangle.position)) * (length(lights[k].position - trace_info_triangle.position)))) * angle;

      vec4 gray = vec4(intensity, intensity, intensity, 1.0);
      //gray = vec4(1.0, 1.0, 1.0, 1.0);

      return (vec4(gray.rgb, 1.0)) / 2 + trace_info_triangle.color / 2;
    }
    return (vec4(0.0, 0.0, 0.0, 1.0)) / 2 + trace_info_triangle.color / 2;
  }
  return (vec4(1.0, 1.0, 1.0, 1.0)) / 2 +  trace_info_triangle.color / 2;
}

layout (local_size_x = 16, local_size_y = 8) in;
void main(void) {
  ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(framebuffer);
  if (pix.x >= size.x || pix.y >= size.y) {
    return;
  }
  vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
  vec3 dir = mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x);

  vec4 color = trace(eye, dir); //vec4(tree[0].bounding.min.x, tree[0].bounding.min.y, tree[0].bounding.min.z, 1.0);
  imageStore(framebuffer, pix, color);
}
